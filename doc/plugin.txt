A FEW NOTES ON THE PLUGIN ARCHITECTURE
======================================

The plugin architecture of SquirrelMail is designed to make it
possible to add new features without having to patch SquirrelMail
itself. At the moment the plugin part of SquirrelMail should be
considered "alpha" or "beta" quality code.

Until the functionality and code is more stable, be prepared for
plugins to suddenly stop working.

Functionality like password changing, displaying ads and calendars
should be possible to add as plugins.


The idea
--------

The idea is to be able to run random code at given places in the
SquirrelMail code. This random code should then be able to do whatever
needed to enhance the functionality of SquirrelMail. The places where
code can be executed are called "hooks".

There are some limitations in what these hooks can do. It is difficult
to use them to change the layout and to change functionality that
already is in SquirrelMail.

Some way for the plugins to interact with the help subsystem and
translations will be provided.


The implementation
------------------

In the main SquirrelMail files the file functions/plugin.php. In
places where hooks are made available they are executed by calling the
function do_hook("hookname").

The do_hook traverses the array $squirrelmail_plugin_hooks["hookname"]
and executes all the functions that are named in that array.

A plugin must reside in a subdirectory in the plugins/ directory. The
name of the subdirectory is considered the name of the plugin.

To start using a plugin, its name must be added to the $plugins array
in config.php like this:

  $plugins[0] = "plugin_name";

When a plugin is registered the file plugins/plugin_name/setup.php is
included and the function squirrelmail_plugin_init_plugin_name is
called with no parameters.


Writing plugins
---------------

A plugin must consist of at least a file called setup.php. All other
files the plugin consist of should also be in the plugin directory.

The function squirrelmail_plugin_init_plugin_name is called to
initalize a plugin. This function could look something like this:

function squirrelmail_plugin_init_demo () {
  global $squirrelmail_plugin_hooks;

  $squirrelmail_plugin_hooks["generic_header"]["demo"] = "plugin_demo_header";
  $squirrelmail_plugin_hooks["menuline"]["demo"] = "plugin_demo_menuline";
}

Note that the SquirrelMail files assume that all other SquirrelMail
files are available as ../directory/file. This means that if some file
in the plugin directory is requested, it must do a chdir("..") before
including any of the standard SquirrelMail files.


List of hooks
-------------
  generic_header                 functions/page_header.php
  menuline                       functions/page_header.php
  compose_button_row             src/compose.php
  compose_bottom                 src/compose.php
  left_main_before               src/left_main.php
  left_main_after                src/left_main.php
  options_save                   src/options.php  (see note on options)
  options_link_and_description   src/options.php  (see note on options)
  options_highlight_bottom       src/options_highlight.php
  options_personal_bottom        src/options_personal.php
  options_display_bottom         src/options_display.php
  options_folders_bottom         src/options_folders.php
  logout                         src/signout.php
  login_before                   src/webmail.php
  login_verified                 src/webmail.php
  loading_prefs                  src/load_prefs.php
  mailbox_index_before           functions/mailbox_display.php
  mailbox_index_after            functions/mailbox_display.php
  right_main_after_header        src/right_main.php
  right_main_bottom              src/right_main.php
  login_top                      src/login.php
  login_bottom                   src/login.php
  read_body_top                  src/read_body.php
  read_body_bottom               src/read_body.php
  search_before_form             src/search.php
  search_after_form              src/search.php
  search_bottom                  src/search.php
  help_top                       src/help.php
  help_bottom                    src/help.php
  help_chapter                   src/help.php
  abook_html_search_below        src/addrbook_search_html.php
   
Options
-------

It is possible to create your own options sections with plugins.  There are
three hooks you will need to use.

1.  options_link_and_description
    This creates the link and has a description that are shown on the options
    page.  This should output HTML that looks like this:

    -----cut here-----  
      function my_function() {
         global $color
         ?>
         <table width=50% cellpadding=3 cellspacing=0 border=0 align=center>
            <tr>
               <td bgcolor="<? echo $color[9] ?>">
                  <a href="../plugins/YOUR_PLUGIN/YOUR_OPTIONS.php">YOUR OPTIONS NAME</a>
               </td>
            </tr>
            <tr>
               <td bgcolor="<? echo $color[0] ?>">
                  YOUR DESCRIPTION
               </td>
            </tr>
         </table>
         <?php
      }
    -----cut here-----  

2.  options_save
    Here is the code that you need to do to save your options in the 
    preference files or manipulate whatever data you are trying to change
    through the options section.  You can look at options.php for details 
    on how this is to be done.

3.  loading_prefs (optional)
    If you are wanting to save preferences to the preference files, then
    you need to do this step as well.  Otherwise if you are manipulating
    other data, ignore this step.

    You should put the code in here that loads your preferences back
    into usable variables.  Examples of this can be found in the file
    src/load_prefs.php
